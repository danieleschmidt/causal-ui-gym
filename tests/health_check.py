#!/usr/bin/env python3
"""
Health check and validation tests for Generation 2 robustness.
"""

import requests
import json
import time
import sys
from typing import Dict, Any

def test_backend_health(base_url: str = "http://localhost:8001") -> bool:
    """Test backend health endpoint"""
    try:
        response = requests.get(f"{base_url}/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            assert data["status"] == "healthy"
            assert "timestamp" in data
            assert "uptime" in data
            print(f"✅ Backend health check passed: {data['status']}")
            return True
        else:
            print(f"❌ Backend health check failed: HTTP {response.status_code}")
            return False
    except Exception as e:
        print(f"❌ Backend health check failed: {e}")
        return False

def test_api_endpoints(base_url: str = "http://localhost:8001") -> bool:
    """Test core API endpoints"""
    try:
        # Test API status
        response = requests.get(f"{base_url}/api/status", timeout=5)
        if response.status_code != 200:
            print(f"❌ API status failed: HTTP {response.status_code}")
            return False
        
        status_data = response.json()
        print(f"✅ API status: {status_data['status']}")
        
        # Test experiments endpoint
        response = requests.get(f"{base_url}/api/experiments", timeout=5)
        if response.status_code != 200:
            print(f"❌ Experiments GET failed: HTTP {response.status_code}")
            return False
        
        print("✅ Experiments endpoint accessible")
        
        # Test experiment creation
        test_exp = {
            "name": "Health Check Experiment",
            "description": "Generated by health check"
        }
        
        response = requests.post(
            f"{base_url}/api/experiments", 
            json=test_exp, 
            timeout=5
        )
        
        if response.status_code != 201:
            print(f"❌ Experiment creation failed: HTTP {response.status_code}")
            return False
        
        exp_data = response.json()
        print(f"✅ Experiment created: {exp_data['id']}")
        
        # Test intervention endpoint
        test_intervention = {
            "variable": "test_variable",
            "value": 42
        }
        
        response = requests.post(
            f"{base_url}/api/interventions",
            json=test_intervention,
            timeout=5
        )
        
        if response.status_code != 200:
            print(f"❌ Intervention failed: HTTP {response.status_code}")
            return False
        
        intervention_data = response.json()
        print(f"✅ Intervention successful: {intervention_data['result']['success']}")
        
        return True
        
    except Exception as e:
        print(f"❌ API endpoints test failed: {e}")
        return False

def test_error_handling(base_url: str = "http://localhost:8001") -> bool:
    """Test error handling robustness"""
    try:
        # Test invalid endpoint
        response = requests.get(f"{base_url}/nonexistent", timeout=5)
        if response.status_code != 404:
            print(f"❌ 404 handling failed: expected 404, got {response.status_code}")
            return False
        
        print("✅ 404 error handling works")
        
        # Test invalid JSON
        response = requests.post(
            f"{base_url}/api/experiments",
            data="invalid json",
            headers={"Content-Type": "application/json"},
            timeout=5
        )
        
        if response.status_code != 400:
            print(f"❌ Bad request handling failed: expected 400, got {response.status_code}")
            return False
            
        print("✅ Invalid JSON error handling works")
        
        return True
        
    except Exception as e:
        print(f"❌ Error handling test failed: {e}")
        return False

def test_concurrency(base_url: str = "http://localhost:8001") -> bool:
    """Test concurrent request handling"""
    try:
        import threading
        import concurrent.futures
        
        def make_request():
            try:
                response = requests.get(f"{base_url}/health", timeout=5)
                return response.status_code == 200
            except:
                return False
        
        # Test 10 concurrent requests
        with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
            futures = [executor.submit(make_request) for _ in range(10)]
            results = [future.result() for future in concurrent.futures.as_completed(futures)]
        
        success_count = sum(results)
        if success_count >= 8:  # Allow for some failures
            print(f"✅ Concurrency test passed: {success_count}/10 requests successful")
            return True
        else:
            print(f"❌ Concurrency test failed: only {success_count}/10 requests successful")
            return False
            
    except Exception as e:
        print(f"❌ Concurrency test failed: {e}")
        return False

def main():
    """Run all health checks"""
    print("🔍 Running Generation 2 Health Checks...\n")
    
    base_url = "http://localhost:8001"
    
    tests = [
        ("Backend Health", test_backend_health),
        ("API Endpoints", test_api_endpoints), 
        ("Error Handling", test_error_handling),
        ("Concurrency", test_concurrency)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n📋 Running {test_name} tests...")
        try:
            if test_func(base_url):
                passed += 1
            else:
                print(f"❌ {test_name} tests failed")
        except Exception as e:
            print(f"❌ {test_name} tests crashed: {e}")
    
    print(f"\n📊 Health Check Summary:")
    print(f"   Passed: {passed}/{total}")
    print(f"   Success Rate: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("🎉 All health checks passed! System is robust.")
        sys.exit(0)
    else:
        print("⚠️  Some health checks failed. System needs attention.")
        sys.exit(1)

if __name__ == "__main__":
    main()