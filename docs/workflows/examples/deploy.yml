# Deployment workflow for Causal UI Gym
# Save this file as .github/workflows/deploy.yml

name: Deploy

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: danieleschmidt/causal-ui-gym

concurrency:
  group: deploy-${{ github.ref }}-${{ inputs.environment || 'auto' }}
  cancel-in-progress: false

jobs:
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Generate version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
          fi

  pre-deployment-tests:
    name: Pre-deployment Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          npm ci
          pip install -r requirements.txt

      - name: Run smoke tests
        run: |
          npm run test:unit -- --run
          python -m pytest tests/unit/ -x

      - name: Build verification
        run: npm run build

  build-and-push:
    name: Build and Push Image
    runs-on: ubuntu-latest
    needs: [determine-environment, pre-deployment-tests]
    if: always() && (needs.pre-deployment-tests.result == 'success' || needs.pre-deployment-tests.result == 'skipped')
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=${{ needs.determine-environment.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VERSION=${{ needs.determine-environment.outputs.version }}
            COMMIT_SHA=${{ github.sha }}
            BRANCH_NAME=${{ github.ref_name }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.determine-environment.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

      - name: Set image output
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.determine-environment.outputs.version }}" >> $GITHUB_OUTPUT

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-push]
    if: needs.determine-environment.outputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.causal-ui-gym.com
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Replace with actual deployment script
          ./scripts/deploy.sh staging ${{ needs.build-and-push.outputs.image }}

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          timeout 300 bash -c 'until curl -f https://staging.causal-ui-gym.com/health; do sleep 5; done'

      - name: Run smoke tests
        run: |
          echo "Running post-deployment smoke tests..."
          curl -f https://staging.causal-ui-gym.com/health
          curl -f https://staging.causal-ui-gym.com/api/health

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: ":rocket: Staging deployment completed",
              attachments: [{
                color: "good",
                fields: [{
                  title: "Environment",
                  value: "staging",
                  short: true
                }, {
                  title: "Version",
                  value: "${{ needs.determine-environment.outputs.version }}",
                  short: true
                }, {
                  title: "URL",
                  value: "https://staging.causal-ui-gym.com",
                  short: false
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-push]
    if: needs.determine-environment.outputs.environment == 'production'
    environment:
      name: production
      url: https://causal-ui-gym.com
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate production deployment
        run: |
          echo "Validating production deployment requirements..."
          # Add validation checks here
          if [[ ! "${{ github.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Production deployments require a semantic version tag"
            exit 1
          fi

      - name: Create deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: ${{ github.token }}
          environment-url: https://causal-ui-gym.com
          environment: production
          description: "Deploy version ${{ needs.determine-environment.outputs.version }} to production"

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Replace with actual deployment script
          ./scripts/deploy.sh production ${{ needs.build-and-push.outputs.image }}

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ github.token }}
          environment-url: https://causal-ui-gym.com
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: success
          description: "Production deployment completed successfully"

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ github.token }}
          environment-url: https://causal-ui-gym.com
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: failure
          description: "Production deployment failed"

      - name: Wait for deployment
        run: |
          echo "Waiting for production deployment to complete..."
          timeout 600 bash -c 'until curl -f https://causal-ui-gym.com/health; do sleep 10; done'

      - name: Run production smoke tests
        run: |
          echo "Running post-deployment verification..."
          curl -f https://causal-ui-gym.com/health
          curl -f https://causal-ui-gym.com/api/health
          # Add more comprehensive production tests

      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: ":tada: Production deployment completed",
              attachments: [{
                color: "good",
                fields: [{
                  title: "Environment",
                  value: "production",
                  short: true
                }, {
                  title: "Version",
                  value: "${{ needs.determine-environment.outputs.version }}",
                  short: true
                }, {
                  title: "URL",
                  value: "https://causal-ui-gym.com",
                  short: false
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  post-deployment:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update monitoring dashboards
        run: |
          echo "Updating monitoring dashboards..."
          # Update deployment annotations in Grafana
          curl -X POST "https://grafana.causal-ui-gym.com/api/annotations" \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "text": "Deployment: ${{ needs.determine-environment.outputs.version }}",
              "tags": ["deployment", "${{ needs.determine-environment.outputs.environment }}"],
              "time": '$(($(date +%s) * 1000))'
            }'

      - name: Update external monitoring
        run: |
          echo "Updating external monitoring services..."
          # Notify external monitoring services about deployment

      - name: Update documentation
        if: needs.determine-environment.outputs.environment == 'production'
        run: |
          echo "Updating deployment documentation..."
          # Update deployment logs or documentation

      - name: Cleanup old images
        run: |
          echo "Cleaning up old container images..."
          # Cleanup old images from registry (keep last 10 versions)

  rollback:
    name: Rollback
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    environment:
      name: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Rollback deployment
        run: |
          echo "Rolling back deployment..."
          # Implement rollback logic
          ./scripts/rollback.sh ${{ needs.determine-environment.outputs.environment }}

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: ":warning: Deployment rolled back",
              attachments: [{
                color: "warning",
                fields: [{
                  title: "Environment",
                  value: "${{ needs.determine-environment.outputs.environment }}",
                  short: true
                }, {
                  title: "Reason",
                  value: "Deployment failure",
                  short: true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}