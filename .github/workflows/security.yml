name: Security

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: "20"
  PYTHON_VERSION: "3.11"

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          npm ci
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run npm audit
        run: npm audit --audit-level high

      - name: Run Snyk for Node.js
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run Python safety check
        run: |
          pip install safety
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: Run Snyk for Python
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            snyk-results.json

  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run Bandit security scan
        run: |
          pip install bandit[toml]
          bandit -r . -f json -o bandit-report.json
        continue-on-error: true

      - name: Run Semgrep SAST
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/react
            p/python
        continue-on-error: true

      - name: Upload SAST reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: sast-reports
          path: |
            bandit-report.json
            semgrep-results.json

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t causal-ui-gym:security-scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'causal-ui-gym:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Docker Bench Security
        run: |
          docker run --rm --net host --pid host --userns host --cap-add audit_control \
            -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
            -v /etc:/etc:ro \
            -v /var/lib:/var/lib:ro \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            -v /usr/lib/systemd:/usr/lib/systemd:ro \
            -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
            --label docker_bench_security \
            docker/docker-bench-security
        continue-on-error: true

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files --baseline .secrets.baseline
        continue-on-error: true

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check license compatibility
        run: |
          npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD;ISC;Unlicense;WTFPL;CC0-1.0' --summary
        continue-on-error: true

      - name: Check Python license compliance
        run: |
          pip install pip-licenses
          pip-licenses --format json --output-file python-licenses.json
        continue-on-error: true

      - name: Upload license reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: license-reports
          path: |
            python-licenses.json

  security-scorecard:
    name: OSSF Security Scorecard
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write
    if: github.event_name != 'pull_request'
    steps:
      - name: Run analysis
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          repo_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, container-scan, secrets-scan, license-check]
    if: always()
    steps:
      - name: Download all reports
        uses: actions/download-artifact@v3
        with:
          path: security-reports

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Job Results" >> security-summary.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
          echo "- SAST Scan: ${{ needs.sast-scan.result }}" >> security-summary.md
          echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-summary.md
          echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-summary.md
          echo "- License Check: ${{ needs.license-check.result }}" >> security-summary.md
          echo "" >> security-summary.md
          echo "Generated on: $(date)" >> security-summary.md

      - name: Comment PR with security summary
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
