name: E2E Tests

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    # Run nightly E2E tests at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Environment to test against'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      browser:
        description: 'Browser to test with'
        required: true
        default: 'chromium'
        type: choice
        options:
        - chromium
        - firefox
        - webkit
        - all

env:
  NODE_VERSION: "20"
  PYTHON_VERSION: "3.11"

jobs:
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        include:
          - browser: chromium
            device: desktop
          - browser: firefox
            device: desktop
          - browser: webkit
            device: mobile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          npm ci
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run preview &
          npx wait-on http://localhost:4173

      - name: Start backend services
        run: |
          python -m uvicorn app:app --host 0.0.0.0 --port 8000 &
          npx wait-on http://localhost:8000/health

      - name: Run Playwright tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          PLAYWRIGHT_DEVICE: ${{ matrix.device }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/

  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run preview &
          npx wait-on http://localhost:4173

      - name: Run visual regression tests
        run: npx playwright test --grep "@visual"

      - name: Upload visual diff artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: visual-diffs
          path: test-results/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          npm ci
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run preview &
          npx wait-on http://localhost:4173

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run k6 performance tests
        run: k6 run tests/performance/k6-load-test.js

      - name: Run Lighthouse performance audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-reports
          path: |
            .lighthouseci/
            k6-results.json

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run preview &
          npx wait-on http://localhost:4173

      - name: Run accessibility tests with axe-playwright
        run: npx playwright test --grep "@accessibility"

      - name: Run Pa11y accessibility tests
        run: |
          npm install -g pa11y
          pa11y http://localhost:4173 --reporter json > pa11y-results.json
        continue-on-error: true

      - name: Upload accessibility reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-reports
          path: |
            pa11y-results.json
            test-results/

  contract-tests:
    name: API Contract Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          npm ci
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start backend services
        run: |
          python -m uvicorn app:app --host 0.0.0.0 --port 8000 &
          npx wait-on http://localhost:8000/health

      - name: Run API contract tests
        run: npm run test:contract

      - name: Generate API documentation
        run: |
          curl http://localhost:8000/openapi.json > openapi.json

      - name: Upload API specs
        uses: actions/upload-artifact@v3
        with:
          name: api-specs
          path: |
            openapi.json
            tests/contract/

  mobile-tests:
    name: Mobile Device Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        device: ['iPhone 13', 'Pixel 5', 'iPad Pro']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run preview &
          npx wait-on http://localhost:4173

      - name: Run mobile device tests
        run: npx playwright test --project="${{ matrix.device }}"

      - name: Upload mobile test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: mobile-test-results-${{ matrix.device }}
          path: test-results/

  e2e-summary:
    name: E2E Test Summary
    runs-on: ubuntu-latest
    needs: [e2e-tests, visual-regression, performance-tests, accessibility-tests, contract-tests, mobile-tests]
    if: always()
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v3
        with:
          path: test-artifacts

      - name: Generate test summary
        run: |
          echo "# E2E Test Summary" > e2e-summary.md
          echo "" >> e2e-summary.md
          echo "## Test Results" >> e2e-summary.md
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> e2e-summary.md
          echo "- Visual Regression: ${{ needs.visual-regression.result }}" >> e2e-summary.md
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> e2e-summary.md
          echo "- Accessibility Tests: ${{ needs.accessibility-tests.result }}" >> e2e-summary.md
          echo "- Contract Tests: ${{ needs.contract-tests.result }}" >> e2e-summary.md
          echo "- Mobile Tests: ${{ needs.mobile-tests.result }}" >> e2e-summary.md
          echo "" >> e2e-summary.md
          echo "Generated on: $(date)" >> e2e-summary.md

      - name: Upload test summary
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-summary
          path: e2e-summary.md

      - name: Comment PR with test summary
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('e2e-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
