name: Deploy

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip tests before deployment'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: "20"
  PYTHON_VERSION: "3.11"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests (if not skipped)
        if: ${{ !inputs.skip_tests }}
        run: |
          npm run lint
          npm run typecheck
          npm run test

      - name: Build application
        run: npm run build

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    environment: 
      name: staging
      url: https://staging.causal-ui-gym.dev
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here
          # Example: kubectl apply, docker-compose, or cloud provider CLI
          
      - name: Update deployment config
        run: |
          # Update staging configuration with new image
          IMAGE_TAG="${{ needs.build.outputs.image-tag }}"
          echo "Deploying image: $IMAGE_TAG"
          
          # Example deployment script
          # sed -i "s|IMAGE_TAG_PLACEHOLDER|$IMAGE_TAG|g" deploy/staging/docker-compose.yml
          # docker-compose -f deploy/staging/docker-compose.yml up -d

      - name: Run smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Run basic health checks
          curl -f https://staging.causal-ui-gym.dev/health || exit 1
          curl -f https://staging.causal-ui-gym.dev/api/health || exit 1

      - name: Run post-deployment tests
        run: |
          # Run critical path tests
          npm run test:smoke -- --baseURL=https://staging.causal-ui-gym.dev

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    environment: 
      name: production
      url: https://causal-ui-gym.dev
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify production readiness
        run: |
          # Verify all required secrets are available
          if [[ -z "${{ secrets.PROD_DEPLOY_KEY }}" ]]; then
            echo "❌ Production deploy key not found"
            exit 1
          fi
          
          if [[ -z "${{ secrets.OPENAI_API_KEY }}" ]]; then
            echo "❌ OpenAI API key not found"
            exit 1
          fi
          
          echo "✅ Production secrets verified"

      - name: Create deployment backup
        run: |
          echo "Creating backup of current production deployment..."
          # Add backup logic here
          # Example: database backup, configuration backup

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          IMAGE_TAG="${{ needs.build.outputs.image-tag }}"
          echo "Deploying image: $IMAGE_TAG"
          
          # Production deployment with zero-downtime strategy
          # Example: blue-green deployment, rolling update
          
      - name: Verify deployment
        run: |
          # Wait for deployment to stabilize
          sleep 60
          
          # Run comprehensive health checks
          curl -f https://causal-ui-gym.dev/health || exit 1
          curl -f https://causal-ui-gym.dev/api/health || exit 1
          
          # Verify critical functionality
          curl -f https://causal-ui-gym.dev/api/version || exit 1

      - name: Run production smoke tests
        run: |
          # Run critical production tests
          npm run test:production -- --baseURL=https://causal-ui-gym.dev

      - name: Monitor deployment metrics
        run: |
          # Monitor key metrics for 5 minutes
          echo "Monitoring deployment metrics..."
          # Add monitoring checks here

      - name: Rollback on failure
        if: failure()
        run: |
          echo "❌ Deployment failed, initiating rollback..."
          # Add rollback logic here
          # Example: restore from backup, revert to previous version

      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#production'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "text": "${{ job.status == 'success' && '🚀 Production deployment successful!' || '❌ Production deployment failed!' }}",
              "attachments": [{
                "color": "${{ job.status == 'success' && 'good' || 'danger' }}",
                "fields": [{
                  "title": "Version",
                  "value": "${{ github.ref_name }}",
                  "short": true
                }, {
                  "title": "Image",
                  "value": "${{ needs.build.outputs.image-tag }}",
                  "short": true
                }]
              }]
            }

  security-scan-deployed:
    name: Security Scan Deployed Application
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always() && needs.deploy-staging.result == 'success'
    steps:
      - name: OWASP ZAP Security Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'https://staging.causal-ui-gym.dev'
          rules_file_name: '.zap/rules.conf'
          cmd_options: '-a'

      - name: Upload ZAP scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: zap-scan-results
          path: report_html.html

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always() && needs.deploy-staging.result == 'success'
    steps:
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://staging.causal-ui-gym.dev
            https://staging.causal-ui-gym.dev/experiments
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Performance budget check
        run: |
          # Check performance metrics against budget
          echo "Checking performance budget..."
          # Add budget validation logic

  cleanup:
    name: Cleanup Old Deployments
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Clean up old container images
        run: |
          # Clean up old images from registry
          echo "Cleaning up old container images..."
          # Keep last 10 versions, remove older ones

      - name: Clean up old staging deployments
        run: |
          # Clean up old staging deployments
          echo "Cleaning up old staging deployments..."

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [build, deploy-staging, deploy-production, security-scan-deployed, performance-monitoring]
    if: always()
    steps:
      - name: Generate deployment summary
        run: |
          echo "# Deployment Summary" > deployment-summary.md
          echo "" >> deployment-summary.md
          echo "## Build Results" >> deployment-summary.md
          echo "- Build: ${{ needs.build.result }}" >> deployment-summary.md
          echo "- Image: ${{ needs.build.outputs.image-tag }}" >> deployment-summary.md
          echo "" >> deployment-summary.md
          echo "## Deployment Results" >> deployment-summary.md
          echo "- Staging: ${{ needs.deploy-staging.result }}" >> deployment-summary.md
          echo "- Production: ${{ needs.deploy-production.result }}" >> deployment-summary.md
          echo "" >> deployment-summary.md
          echo "## Security & Performance" >> deployment-summary.md
          echo "- Security Scan: ${{ needs.security-scan-deployed.result }}" >> deployment-summary.md
          echo "- Performance: ${{ needs.performance-monitoring.result }}" >> deployment-summary.md
          echo "" >> deployment-summary.md
          echo "Generated on: $(date)" >> deployment-summary.md

      - name: Upload deployment summary
        uses: actions/upload-artifact@v3
        with:
          name: deployment-summary
          path: deployment-summary.md
